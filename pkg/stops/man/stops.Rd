% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stops-package.R, R/stops.R
\docType{package}
\name{stops}
\alias{stops}
\alias{stops-package}
\alias{stops}
\title{stops: structure optimized proximity scaling}
\usage{
stops(dis, loss = c("strain", "stress", "smacofSym", "powerstress",
  "powermds", "powerelastic", "powerstrain", "elastic", "sammon", "sammon2",
  "smacofSphere", "powersammon", "rstress", "sstress"),
  transformation = mkPower, theta = 1, structures = c("cclusteredness",
  "clinearity", "cdependence", "cmanifoldness", "cassociation",
  "cnonmonotonicity", "cfunctionality", "ccomplexity", "cfaithfulness"),
  ndim = 2, weightmat = NULL, init = NULL, stressweight = 1,
  strucweight, strucpars, optimmethod = c("SANN", "ALJ", "pso", "Kriging",
  "tgp"), lower = c(1, 1, 0.5), upper = c(5, 5, 2), verbose = 0,
  type = c("additive", "multiplicative"), s = 5, initpoints = 10,
  itmax = 50, model, ...)
}
\arguments{
\item{dis}{numeric matrix or dist object of a matrix of proximities}

\item{loss}{which loss function to be used for fitting, defaults to stress}

\item{transformation}{function to transform the proximities and/or distances; need to be parameterized by theta; currently not used}

\item{theta}{parameters for the proximiy and distance transformation}

\item{structures}{what c-structuredness should be considered; if missing no structure is considered.}

\item{ndim}{number of dimensions of the target space}

\item{weightmat}{(optional) a matrix of nonnegative weights; defaults to 1 for all off diagonals}

\item{init}{(optional) initial configuration}

\item{stressweight}{weight to be used for the fit measure; defaults to 1}

\item{strucweight}{weight to be used for the cordillera; defaults to -1/length(structures)}

\item{strucpars}{list of parameters for the structuredness indices; must be in the same ordering as the indices in structures. If missing it is set to NULL.}

\item{optimmethod}{What optimizer to use? Currently supported are Bayesian optimization with Gaussian Process priors and Kriging ("Kriging"), Bayesian optimization with treed Gaussian processes ("tgp"), Adaptive LJ Search ("ALJ"), Particle Swarm optimization ("pso"), simulated annealing ("SANN"). Defaults to ALJ version.}

\item{lower}{The lower contraints of the search region}

\item{upper}{The upper contraints of the search region}

\item{verbose}{numeric value hat prints information on the fitting process; >2 is very verbose}

\item{type}{which aggregation for the multi objective target function? Either 'additive' (default) or 'multiplicative'}

\item{s}{number of particles if pso is used}

\item{initpoints}{number of initial points to fit the surrogate model for bayesian optimization; default is 10}

\item{itmax}{maximum number of iterations; number of steps of Bayesian optimization if Kriging or tgp is used; default is 50. Note that with tgp the actual number of evaluation of the MDS method is between itmax and 5*itmax as tgp it samples 1-5 candidates from the posterior and uses the best candidate.}

\item{model}{a character specifying the surrogate model to use. For Kriging it specifies the covariance kernel for the GP prior; see \code{\link{covTensorProduct-class}} defaults to "powerexp". For tgp it specifies the non stationary process used see \code{\link{bgp}}, defaults to "btgpllm"}

\item{...}{additional arguments to be passed to the optimization procedure}
}
\value{
see \code{\link{pcops}}
}
\description{
A package for "structure optimized proximity scaling" (STOPS), a collection of methods that fit nonlinear distance transformations in multidimensional scaling (MDS) and trade-off the fit with structure considerations to find optimal parameters or optimal configurations. This includes the three variants of cluster optimized proximity scaling (COPS). The package contains various functions, wrappers, methods and classes for fitting, plotting and displaying different MDS models in a STOPS framework like Torgerson scaling, SMACOF, Sammon mapping, elastic scaling, symmetric SMACOF, spherical SMACOF, sstress, rstress, powermds, power elastic scaling, power sammon mapping, powerstress, COPS-0, COPS-C and P-COPS. All of these models can also be fit as MDS with power transformations. The package further contains functions for optimization (Adaptive LJ and for Bayesian optimization with treed Gaussian process with jump to linear models) and functions for various structuredness indices

High Level STOPS Function
}
\details{
The stops package provides five categories of important functions:

Models & Algorithms:
\itemize{
\item cops() and stops() ... which fit COPS and STOPS models as described in Rusch et al. (2015) and Rusch et al. (2016). By setting cordweight or strucweight to zero they can also be used to fit metric MDS for many different models, see below.  
\item powerStressMin()... a workhorse for fitting s-stress, r-stress (de Leeuw, 2014), powerStress (e.g., Rusch et al., 2015a), Sammon mapping with power transformations (powersammon) and elastic scaling with power transformation (powerelastic). They can most conveniently be accessed via the cops or stops functions and setting stressweight=1 and cordweight or strucweight=0 or by the dedicated functions starting with cops_XXX where XXX is the method and setting stressweight=1 and cordweight=0. It uses the nested majorization algorithm for r-stress of De Leeuw(2014).
}

Structuredness Indices:
\itemize{
\item c_linearity() ... Multiple correlation of a configuration
}

Optimization functions:
\itemize{
\item ljoptim() ... An (adaptive) version of the Luus-Jakola random search
}
Wrappers and convenience functions:
\itemize{
\item conf_adjust(): procrustes adjustment of configurations 
\item cmdscale(), sammon(): wrappers that return S3 objects
\item coploss() ... a function to calculate coploss (Rusch et al., 2015a)
\item cop_smacofSym(), cop_sammon(), cop_cmdscale(), cop_rstress(), cop_powerstress(),cop_smacofSphere(), cop_sammon2(), cop_elastic(), cop_sstress(), cop_powerelastic(),cop_powersammon(): cop versions of these MDS models.
\item stop_smacofSym(), stop_powerstress(), stop_flexsmacof(): stop versions of these MDS models.
\item stoploss() ... a function to calculate stoploss (Rusch et al., 2015b)
}

Methods: 
For most of the objects returned by the high-level functions S3 classes and methods for standard generics were implemented, including print, summary, plot, plot3d, plot3dstatic.

References:
\itemize{
\item Rusch, T., Mair, P. \& Hornik, K. (2015) COPS: Cluster optimized proximity scaling, Report 2015/1, Discussion Paper Series, Center for Empirical Research Methods, WU Vienna University of Economics and Business.
\item Rusch, T., Mair, P. \& Hornik, K. (2016a) Assessing and quantifying clusteredness: The OPTICS Cordillera, Report 2016/1, Discussion Paper Series, Center for Empirical Research Methods, WU Vienna University of Economics and Business.
\item Rusch, T., Mair, P. \& Hornik, K. (2016b) Structure based hyperparameter selection for nonlinear dimension reduction: The Structure Optimized Proximity Scaling (STOPS) framework, Report 2016/2, Discussion Paper Series, Center for Empirical Research Methods, WU Vienna University of Economics and Business. \emph{forthcoming} 
}

Authors: Thomas Rusch, Jan de Leeuw, Patrick Mair

Maintainer: Thomas Rusch
}
\examples{
library(cordillera)
data(BankingCrisesDistances)

#shorthand function for COPS variant 2 (hyperparameter)
res<-pcops(BankingCrisesDistances[,1:69])
res
summary(res)
plot(res)
plot(res,"reachplot")
plot(res,"transplot")
plot(res,"Shepard")

\donttest{
#OPTICS
ores<-cordillera::e_optics(res$conf,minpts=2,epsilon=100)
ores
summary(ores)
plot(ores)
}
#OPTICS cordillera
cres<-cordillera::cordillera(res$fit$conf)
cres
summary(cres)
plot(cres)

\donttest{
#STOPS
strucpars<-list(c(epsilon=10,minpts=2),NULL)
res<-stops(BankingCrisesDistances[,1:69],
structures=c("cclusteredness","clinearity"),strucpars=strucpars)
res
summary(res)
plot(res)
plot(res,"Shepard")
}
\donttest{
data(BankingCrisesDistances)
strucpar<-list(c(eps=10,minpts=2),NULL)
res1<-stops(BankingCrisesDistances[,1:69],loss="stress",verbose=0,
structures=c("cclusteredness","clinearity"),
strucpars=strucpar)
res1

strucpar<-list(list(alpha=1,C=15,var.thr=1e-5,eps=NULL),list(alpha=1,C=15,var.thr=1e-5,eps=NULL))
res1<-stops(BankingCrisesDistances[,1:69],loss="stress",verbose=0,
structures=c("cfunctionality","ccomplexity"),
strucpars=strucpar)
res1
}

}
\keyword{clustering}
\keyword{multivariate}
